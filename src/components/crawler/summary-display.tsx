
"use client";

import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Loader2, AlertCircle, FileText, Zap, BarChart3, Clock } from "lucide-react";

interface SummaryDisplayProps {
  summary: string | null;
  isLoading: boolean;
  error: string | null;
  summaryStats?: {
    originalLength?: number;
    summaryLength?: number;
    compressionRatio?: number;
    processingTime?: number;
    summaryType?: string;
  };
}

export function SummaryDisplay({ summary, isLoading, error, summaryStats }: SummaryDisplayProps) {
  const renderContent = () => {
    if (isLoading) {
      return (
        <div className="flex flex-col items-center justify-center h-36">
          <Loader2 className="h-10 w-10 animate-spin text-primary mb-3" />
          <p className="text-muted-foreground">Generating summary...</p>
        </div>
      );
    }

    if (error) {
      return (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Summarization Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      );
    }

    if (summary) {
      return (
        <div className="space-y-4">
          {/* Summary Statistics */}
          {summaryStats && (
            <div className="flex flex-wrap gap-2 mb-4">
              {summaryStats.summaryType && (
                <Badge variant="secondary" className="flex items-center">
                  <Zap className="h-3 w-3 mr-1" />
                  {summaryStats.summaryType.replace('-', ' ')}
                </Badge>
              )}
              {summaryStats.compressionRatio && (
                <Badge variant="outline" className="flex items-center">
                  <BarChart3 className="h-3 w-3 mr-1" />
                  {summaryStats.compressionRatio}% compression
                </Badge>
              )}
              {summaryStats.processingTime && (
                <Badge variant="outline" className="flex items-center">
                  <Clock className="h-3 w-3 mr-1" />
                  {summaryStats.processingTime}ms
                </Badge>
              )}
            </div>
          )}

          {/* Summary Content */}
          <ScrollArea className="h-60 w-full rounded-md border p-4 bg-muted/20">
            <p className="text-sm whitespace-pre-wrap break-words leading-relaxed">{summary}</p>
          </ScrollArea>

          {/* Additional Stats */}
          {summaryStats && (summaryStats.originalLength || summaryStats.summaryLength) && (
            <>
              <Separator />
              <div className="flex justify-between text-xs text-muted-foreground">
                {summaryStats.originalLength && (
                  <span>Original: {summaryStats.originalLength.toLocaleString()} chars</span>
                )}
                {summaryStats.summaryLength && (
                  <span>Summary: {summaryStats.summaryLength.toLocaleString()} chars</span>
                )}
              </div>
            </>
          )}
        </div>
      );
    }

    return (
      <div className="text-center text-muted-foreground py-6">
        <FileText className="h-8 w-8 mx-auto mb-2 text-muted-foreground/70" />
        <p>Summary will appear here once data is extracted.</p>
      </div>
    );
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>AI Summary</CardTitle>
        <CardDescription>
          A concise summary of the extracted content, generated by AI.
        </CardDescription>
      </CardHeader>
      <CardContent>
        {renderContent()}
      </CardContent>
    </Card>
  );
}
